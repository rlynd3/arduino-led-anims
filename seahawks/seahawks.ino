// SuperBowl 2015!! #GoHawks

#include <Adafruit_DotStar.h>
#include <SPI.h>
#include <avr/pgmspace.h>

#define NUMPIXELS 		44 // Number of LEDs in strip
#define HALFPIXELS 		( NUMPIXELS / 2 )
#define QTRPIXELS 		( NUMPIXELS / 4 )

#define FPS 			60
#define DT 				( 1000 / FPS )
#define DEG_TO_RAD 		3.141592 / 180

// Pallette
#define DARK_1 			0x000022
#define DARK_2 			0x000055
#define GRAY 			0x464A4d
#define ACCENT_1 		0x00CC00
#define ACCENT_2 		0x29CC29
#define OFF 			0x000000
#define WHITE 			0xFFFFFF

// frames before next anim. must be power of 2 - 1
#define DURATION 		2047

enum Anim {
	CLOUD,
	CYLON,
	CYCLE,
	MARQUEE,
	AnimCount,
	WIPE // transition
};

// Here's how to control the LEDs from any two pins:
//#define DATAPIN    4
//#define CLOCKPIN   5
//Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS, DATAPIN, CLOCKPIN);

// Hardware SPI is a little faster, but must be wired to specific pins
// (Arduino Uno = pin 11 for data, 13 for clock, other boards are different).
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS);

// private vars
int _c = 0, head = 0;
float _f = 0;
Anim _next, _state;

void setup() {
	Serial.begin(9600);
	Serial.println("SuperBowl 2015!! #GoHawks");

	// SPI.setClockDivider(SPI_CLOCK_DIV4);
	
	delay( 1000 );

	strip.begin(); // Initialize pins for output
	strip.show();  // Turn all LEDs off ASAP

	setNextState( int( MARQUEE ) );
}

void loop() {
	
	switch ( _state ) {
		case CLOUD :
			cloud( 0.5 );
			break;
		case CYLON :
			cylon( cos( ( _c / 10 ) * DEG_TO_RAD ) * 2 + 2.8, true );
			break;
		case MARQUEE :
			marquee( 0.05 );
			break;
		case CYCLE :
			cycle( _c & DURATION );
			break;
		case WIPE:
		default:
			wipe();
			break;
	}

	if( ( _c & DURATION ) == 0 ){
		int s = ( int(_state) + 1 ) % int( AnimCount );
		setNextState( s );
	}

	_c++;
	delay( DT );
}

void setNextState( int state ) {
	_next =  static_cast<Anim>( state );
	_state = WIPE;
	// reset
	_c = 0; 
	head = NUMPIXELS * 3;
}

void postWipe() {
	_state = _next;
	switch ( _state ) {
	 	case MARQUEE:
			break;
		default:
			break;
	}
	_c = 1;
}

void marquee( float tempo ) {
	for( int i=0; i < NUMPIXELS; i+=4 ) {
		strip.setPixelColor((i + head + 0) % NUMPIXELS, OFF);
		strip.setPixelColor((i + head + 1) % NUMPIXELS, DARK_2);
		strip.setPixelColor((i + head + 2) % NUMPIXELS, OFF);
		strip.setPixelColor((i + head + 3) % NUMPIXELS, ACCENT_1);
	}
    strip.show();
	head = int(_f) % NUMPIXELS;
	_f += tempo;
}

void cylon( float tempo, boolean bounce ) {
	for( int i=0; i < NUMPIXELS; i++ ) {
		strip.setPixelColor(i, DARK_1);
	}
	strip.setPixelColor(head - 2 > NUMPIXELS ? 0 : head - 4, DARK_2);
	strip.setPixelColor(head - 2 > NUMPIXELS ? 0 : head - 3, DARK_2);
	strip.setPixelColor(head - 2 > NUMPIXELS ? 0 : head - 2, ACCENT_1);
	strip.setPixelColor(head - 1 > NUMPIXELS ? 0 : head - 1, ACCENT_1);
	strip.setPixelColor(head, ACCENT_2);
	strip.setPixelColor(head + 1 > NUMPIXELS ? 0 : head + 1, ACCENT_1);
	strip.setPixelColor(head + 2 > NUMPIXELS ? 0 : head + 2, ACCENT_1);
	strip.setPixelColor(head + 2 > NUMPIXELS ? 0 : head + 3, DARK_2);
	strip.setPixelColor(head - 2 > NUMPIXELS ? 0 : head + 4, DARK_2);

	strip.show();

	if( bounce ){
		head = sin( _f * DEG_TO_RAD ) * HALFPIXELS + HALFPIXELS;
	} else {
		head = int(_f) % NUMPIXELS;
	}
	
	_f += tempo;
}

void cycle( int frame ) {
	uint8_t rgb[6]; // color components

	uint32_t color1;
	uint32_t color2;

	int dur = ( DURATION + 1 ) / 3;

	if( frame <= dur ) {
		color1 = DARK_2;
		color2 = GRAY;
		hexToRGB( color1, rgb );
		hexToRGB( color2, rgb + 3 );
	}
	else if( frame > dur && frame <= dur * 2 ) {
		color1 = GRAY;
		color2 = ACCENT_1;
		hexToRGB( color1, rgb );
		hexToRGB( color2, rgb + 3 );
		frame -= dur;
	}
	else {
		color1 = ACCENT_1;
		color2 = DARK_2;
		hexToRGB( color1, rgb );
		hexToRGB( color2, rgb + 3 );
		frame -= dur * 2;
	}

	frame = constrain( frame, 0, dur );

	uint8_t r = linear( frame, rgb[0], rgb[3] - rgb[0], dur );
	uint8_t g = linear( frame, rgb[1], rgb[4] - rgb[1], dur );
	uint8_t b = linear( frame, rgb[2], rgb[5] - rgb[2], dur );

	for( int i=0; i < NUMPIXELS; i++ ) {
		strip.setPixelColor( i, r, g, b );
	}
	strip.show();
}

// Animation data (RGB) stored in flash mem
prog_uint32_t cloud_rgb[512] PROGMEM = {
	0x0b6427, 0x0b6417, 0x0b6217, 0x0b6217, 0x0b6631, 0x0b7171, 0x0b7148, 0x0b7781,
	0x21788b, 0x217b8b, 0x217fb6, 0x217c80, 0x217d92, 0x217c7c, 0x218168, 0x218033,
	0x09841b, 0x097c2c, 0x097f1d, 0x097a2c, 0x097c32, 0x098888, 0x098c1d, 0x099a20,
	0x09a818, 0x099818, 0x099118, 0x098818, 0x09881b, 0x099191, 0x098d18, 0x098118,
	0x087817, 0x087217, 0x08692c, 0x086c18, 0x087517, 0x087373, 0x087818, 0x088e1b,
	0x0a921d, 0x0a8a18, 0x0a7e1e, 0x0a6f32, 0x0a6717, 0x0a6464, 0x0a651a, 0x0a6d1c,
	0x087a1a, 0x08771a, 0x086f17, 0x08652c, 0x085d2c, 0x084f4f, 0x084c17, 0x084f17,
	0x095718, 0x09581b, 0x095718, 0x09562b, 0x094b1d, 0x095b5b, 0x096066, 0x095c5e,
	0x1d6775, 0x1d7497, 0x1d7492, 0x1d7793, 0x1d7593, 0x1d7b7b, 0x1d7190, 0x1d7194,
	0x267497, 0x266b74, 0x26696a, 0x266866, 0x26604f, 0x266565, 0x265a4b, 0x266465,
	0x1b5655, 0x1b5d60, 0x1b6b83, 0x1b6068, 0x1b6a7e, 0x1b6464, 0x1b6769, 0x1b6d80,
	0x2c7289, 0x2c6f74, 0x2c7885, 0x2c7985, 0x2c7b84, 0x2c7e7e, 0x2c8094, 0x2c816f,
	0x2d806c, 0x2d8285, 0x2d8368, 0x2d7d6b, 0x2d774e, 0x2d7070, 0x2d6a5c, 0x2d602e,
	0x21682e, 0x216b2f, 0x21762e, 0x216c2e, 0x21663e, 0x216565, 0x216a49, 0x216c32,
	0x257730, 0x257f34, 0x259231, 0x25a132, 0x259848, 0x25a3a3, 0x25aa36, 0x259438,
	0x2e7f39, 0x2e7a3b, 0x2e8646, 0x2e8c45, 0x2e9253, 0x2e9696, 0x2e9f60, 0x2ebe51,
	0x4ed254, 0x4eca58, 0x4ead62, 0x4e9c59, 0x4e945d, 0x4e9191, 0x4e6c5c, 0x4e6959,
	0x516c5c, 0x516f67, 0x51785a, 0x518462, 0x517959, 0x518080, 0x518f61, 0x518b59,
	0x4a855e, 0x4a965f, 0x4a9c5a, 0x4aa05d, 0x4ab659, 0x4ab0b0, 0x4aad59, 0x4aa059,
	0x3d9061, 0x3d7f50, 0x3d894f, 0x3d7b49, 0x3d7844, 0x3d8989, 0x3d8240, 0x3d913d,
	0x1c8b44, 0x1c9836, 0x1c9f2f, 0x1ca62c, 0x1ca426, 0x1c9999, 0x1c9b32, 0x1ca81c,
	0x10a932, 0x10ba29, 0x10c01a, 0x10b119, 0x10932d, 0x108181, 0x107821, 0x107417,
	0x087217, 0x086c18, 0x086c17, 0x086e27, 0x086b29, 0x087373, 0x088118, 0x088318,
	0x0a951d, 0x0a9e1e, 0x0aaa25, 0x0aaf58, 0x0aa371, 0x0a9e9e, 0x0a9286, 0x0a85ab,
	0x1d8b78, 0x1d816c, 0x1d7c56, 0x1d7a19, 0x1d771a, 0x1d8686, 0x1d8e44, 0x1d8821,
	0x0e7924, 0x0e7525, 0x0e6b28, 0x0e652b, 0x0e5f30, 0x0e6363, 0x0e5d33, 0x0e5c36,
	0x18633f, 0x186443, 0x18653d, 0x18663f, 0x186741, 0x186e6e, 0x186f43, 0x186842,
	0x1c6844, 0x1c6a4a, 0x1c6845, 0x1c6c59, 0x1c7584, 0x1c7070, 0x1c7691, 0x1c738a,
	0x2a6d85, 0x2a585b, 0x2a5659, 0x2a443c, 0x2a3e2b, 0x2a4343, 0x2a4026, 0x2a4f41,
	0x0e4124, 0x0e3d22, 0x0e3826, 0x0e3024, 0x0e2a1d, 0x0e2a2a, 0x0e291a, 0x0e281a,
	0x0a2a1e, 0x0a2d25, 0x0a261b, 0x0a2619, 0x0a2e1e, 0x0a3636, 0x0a362a, 0x0a3a28,
	0x0e3e32, 0x0e2d17, 0x0e2d1c, 0x0e4149, 0x0e2c23, 0x0e5c5c, 0x0e5775, 0x0e658c,
	0x1b5673, 0x1b5673, 0x1b536b, 0x1b271c, 0x1b3a3f, 0x1b2727, 0x1b2516, 0x1b2516,
	0x08271c, 0x082516, 0x08271c, 0x082516, 0x082516, 0x082727, 0x082616, 0x082616,
	0x072916, 0x072d16, 0x073217, 0x07412f, 0x073f17, 0x074848, 0x074717, 0x075023,
	0x095a18, 0x09641a, 0x096919, 0x097628, 0x097d27, 0x098383, 0x097b19, 0x09721a,
	0x0d661a, 0x0d5b1a, 0x0d5b21, 0x0d5e1f, 0x0d581d, 0x0d5c5c, 0x0d571d, 0x0d581e,
	0x16632e, 0x166b21, 0x167221, 0x167429, 0x168024, 0x168383, 0x168b26, 0x168c26,
	0x1d8b28, 0x1d8742, 0x1d852b, 0x1d8237, 0x1d7f3b, 0x1d7f7f, 0x1d772f, 0x1d713e,
	0x267c31, 0x268a35, 0x268833, 0x268034, 0x267b36, 0x267777, 0x267045, 0x266f3a,
	0x307639, 0x30773f, 0x30813b, 0x308641, 0x30843d, 0x308181, 0x308146, 0x308341,
	0x3a834a, 0x3a8442, 0x3a8d44, 0x3a9157, 0x3a9d5a, 0x3aaeae, 0x3aa25a, 0x3aa94d,
	0x419d4f, 0x419654, 0x418859, 0x418359, 0x41875d, 0x418686, 0x41816a, 0x41846c,
	0x487f6c, 0x487c6f, 0x487c7e, 0x487c8d, 0x487b86, 0x487474, 0x48767e, 0x487b8d,
	0x4e797d, 0x4e7977, 0x4e7a73, 0x4e776c, 0x4e766b, 0x4e7373, 0x4e6f5f, 0x4e6c5c,
	0x456c53, 0x456e5a, 0x456956, 0x45644f, 0x45614b, 0x455d5d, 0x455c4b, 0x456053,
	0x445d4b, 0x446153, 0x445d4b, 0x445f4c, 0x446053, 0x445c5c, 0x44645d, 0x446867,
	0x445f52, 0x446f78, 0x447381, 0x447e9d, 0x447f9a, 0x447a7a, 0x447a90, 0x447786,
	0x4f7378, 0x4f8180, 0x4f9073, 0x4f7765, 0x4f6c61, 0x4f6e6e, 0x4f6e46, 0x4f7152,
	0x447255, 0x447750, 0x447a4b, 0x447a4c, 0x447d4c, 0x448282, 0x44874c, 0x448d4d,
	0x468e4e, 0x468554, 0x46784b, 0x466748, 0x465e45, 0x465959, 0x465239, 0x464b36,
	0x284733, 0x284940, 0x284132, 0x284031, 0x28453c, 0x283d3d, 0x283a2a, 0x283c2d,
	0x1d3828, 0x1d3725, 0x1d3b2f, 0x1d3525, 0x1d3624, 0x1d3939, 0x1d3521, 0x1d3d3a,
	0x112d1f, 0x112d1e, 0x112b1c, 0x112c1c, 0x11352e, 0x112a2a, 0x113519, 0x11482a,
	0x0d401e, 0x0d5954, 0x0d6259, 0x0d6f78, 0x0d778b, 0x0d7676, 0x0d7c80, 0x0d7f6e,
	0x1c8569, 0x1c8b57, 0x1c8a69, 0x1c8e36, 0x1c874e, 0x1c8484, 0x1c8146, 0x1c7a2f,
	0x10723b, 0x107217, 0x107427, 0x107a1f, 0x107f20, 0x108181, 0x108518, 0x108a18,
	0x0d8e28, 0x0d951b, 0x0d9818, 0x0d9819, 0x0d9720, 0x0d9191, 0x0d8933, 0x0d8923,
	0x098a18, 0x09901b, 0x099020, 0x098930, 0x098d26, 0x099898, 0x099238, 0x098c3a,
	0x098718, 0x098818, 0x098118, 0x09751f, 0x096917, 0x096666, 0x096427, 0x095917,
	0x095d1f, 0x096121, 0x095f17, 0x095e2c, 0x095617, 0x095b5b, 0x09672f, 0x097267,
	0x297eae, 0x297fbb, 0x2988d3, 0x2989d5, 0x2980c2, 0x297d7d, 0x296a58, 0x296f5f,
	0x086c17, 0x087417, 0x087232, 0x086d36, 0x086717, 0x086666, 0x086732, 0x085f17,
	0x0c6429, 0x0c6217, 0x0c5f18, 0x0c5c17, 0x0c5c18, 0x0c6161, 0x0c5c17, 0x0c632e
};

void cloud( float tempo ) {
	for( int i=0; i < NUMPIXELS; i++ ) {
		strip.setPixelColor( i, pgm_read_dword( cloud_rgb + ( int( _f + i ) & 511 ) ) );
	}
	strip.show();
	_f += tempo;
}

void wipe() {
	// 3 wipes and exit to next state
	if( head == 0 ){
		postWipe(); 
	}
	else if( head >= NUMPIXELS * 2 ) {
		strip.setPixelColor( ( head % NUMPIXELS ) - 1, ACCENT_1);
	}
	else if( head < NUMPIXELS * 2 && head >= NUMPIXELS ) {
		strip.setPixelColor(NUMPIXELS - ( head % NUMPIXELS ) - 1, GRAY);
	}
	else {
		strip.setPixelColor( ( head % NUMPIXELS ) - 1, DARK_2);
	}
	
	strip.show();
	head--;
}


// ease equations

float linear( float t, float b, float c, float d ) {
	return c * t / d + b;
};

// utils

void hexToRGB( uint32_t hex, uint8_t *out ) {
	out[0] = ( hex >> 16 ) & 0xFF;
	out[1] = ( hex >> 8  ) & 0xFF;
	out[2] = hex & 0xFF;
}